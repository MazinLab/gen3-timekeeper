-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity timekeeper is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    pps : IN STD_LOGIC;
    time_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    time_V_ap_vld : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of timekeeper is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "timekeeper,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.454625,HLS_SYN_LAT=20,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=1750,HLS_SYN_LUT=898,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_F4240 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000011110100001001000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv20_F3E59 : STD_LOGIC_VECTOR (19 downto 0) := "11110011111001011001";
    constant ap_const_lv20_3E7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001111100111";
    constant ap_const_lv20_F4240 : STD_LOGIC_VECTOR (19 downto 0) := "11110100001001000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal unixtime_V : STD_LOGIC_VECTOR (63 downto 0);
    signal pps_misalign_ap_vld : STD_LOGIC;
    signal misaligncount : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal pps_last : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal us_clk_tics_V : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal hs_clk_tics_V : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal unixtime_V_read_reg_239 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal pps_read_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_read_reg_244_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_fu_108_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln700_reg_250 : STD_LOGIC_VECTOR (8 downto 0);
    signal us_clk_tics_V_load_reg_256 : STD_LOGIC_VECTOR (19 downto 0);
    signal and_ln22_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_reg_261 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_reg_261_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal us_tic_time_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal us_tic_time_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_fu_180_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln38_reg_269 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_99_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln214_reg_274 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_phi_reg_pp0_iter0_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter4_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter5_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter6_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter7_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter8_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter9_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter10_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter11_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter12_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter13_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter14_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter15_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter16_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter17_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter18_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter19_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter20_empty_reg_90 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln23_fu_217_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal select_ln42_fu_194_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_t_V : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_99_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal xor_ln20_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_1_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln22_1_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_rising_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln214_fu_174_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln214_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component timekeeper_mul_64bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component timekeeper_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        unixtime_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        pps_misalign : IN STD_LOGIC_VECTOR (15 downto 0);
        pps_misalign_ap_vld : IN STD_LOGIC );
    end component;



begin
    timekeeper_AXILiteS_s_axi_U : component timekeeper_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        unixtime_V => unixtime_V,
        pps_misalign => misaligncount,
        pps_misalign_ap_vld => pps_misalign_ap_vld);

    timekeeper_mul_64bkb_U1 : component timekeeper_mul_64bkb
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 64,
        din1_WIDTH => 21,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => unixtime_V_read_reg_239,
        din1 => grp_fu_99_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_99_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter20_empty_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then
                if ((us_tic_time_reg_265 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter20_empty_reg_90 <= us_clk_tics_V_load_reg_256;
                elsif ((us_tic_time_reg_265 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter20_empty_reg_90 <= select_ln38_reg_269;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter20_empty_reg_90 <= ap_phi_reg_pp0_iter19_empty_reg_90;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln700_reg_250 <= add_ln700_fu_108_p2;
                and_ln22_reg_261 <= and_ln22_fu_151_p2;
                and_ln22_reg_261_pp0_iter19_reg <= and_ln22_reg_261;
                mul_ln214_reg_274 <= grp_fu_99_p2;
                pps_read_reg_244_pp0_iter10_reg <= pps_read_reg_244_pp0_iter9_reg;
                pps_read_reg_244_pp0_iter11_reg <= pps_read_reg_244_pp0_iter10_reg;
                pps_read_reg_244_pp0_iter12_reg <= pps_read_reg_244_pp0_iter11_reg;
                pps_read_reg_244_pp0_iter13_reg <= pps_read_reg_244_pp0_iter12_reg;
                pps_read_reg_244_pp0_iter14_reg <= pps_read_reg_244_pp0_iter13_reg;
                pps_read_reg_244_pp0_iter15_reg <= pps_read_reg_244_pp0_iter14_reg;
                pps_read_reg_244_pp0_iter16_reg <= pps_read_reg_244_pp0_iter15_reg;
                pps_read_reg_244_pp0_iter17_reg <= pps_read_reg_244_pp0_iter16_reg;
                pps_read_reg_244_pp0_iter2_reg <= pps_read_reg_244_pp0_iter1_reg;
                pps_read_reg_244_pp0_iter3_reg <= pps_read_reg_244_pp0_iter2_reg;
                pps_read_reg_244_pp0_iter4_reg <= pps_read_reg_244_pp0_iter3_reg;
                pps_read_reg_244_pp0_iter5_reg <= pps_read_reg_244_pp0_iter4_reg;
                pps_read_reg_244_pp0_iter6_reg <= pps_read_reg_244_pp0_iter5_reg;
                pps_read_reg_244_pp0_iter7_reg <= pps_read_reg_244_pp0_iter6_reg;
                pps_read_reg_244_pp0_iter8_reg <= pps_read_reg_244_pp0_iter7_reg;
                pps_read_reg_244_pp0_iter9_reg <= pps_read_reg_244_pp0_iter8_reg;
                us_clk_tics_V_load_reg_256 <= us_clk_tics_V;
                us_tic_time_reg_265 <= us_tic_time_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter10_empty_reg_90 <= ap_phi_reg_pp0_iter9_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter11_empty_reg_90 <= ap_phi_reg_pp0_iter10_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter12_empty_reg_90 <= ap_phi_reg_pp0_iter11_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter13_empty_reg_90 <= ap_phi_reg_pp0_iter12_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter14_empty_reg_90 <= ap_phi_reg_pp0_iter13_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter15_empty_reg_90 <= ap_phi_reg_pp0_iter14_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter16_empty_reg_90 <= ap_phi_reg_pp0_iter15_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter17_empty_reg_90 <= ap_phi_reg_pp0_iter16_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter18_empty_reg_90 <= ap_phi_reg_pp0_iter17_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter19_empty_reg_90 <= ap_phi_reg_pp0_iter18_empty_reg_90;
                hs_clk_tics_V <= select_ln42_fu_194_p3;
                pps_last <= pps_read_reg_244_pp0_iter17_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter1_empty_reg_90 <= ap_phi_reg_pp0_iter0_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter2_empty_reg_90 <= ap_phi_reg_pp0_iter1_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_empty_reg_90 <= ap_phi_reg_pp0_iter2_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter4_empty_reg_90 <= ap_phi_reg_pp0_iter3_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter5_empty_reg_90 <= ap_phi_reg_pp0_iter4_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter6_empty_reg_90 <= ap_phi_reg_pp0_iter5_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter7_empty_reg_90 <= ap_phi_reg_pp0_iter6_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter8_empty_reg_90 <= ap_phi_reg_pp0_iter7_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter9_empty_reg_90 <= ap_phi_reg_pp0_iter8_empty_reg_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln22_reg_261_pp0_iter19_reg))) then
                misaligncount <= add_ln23_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                pps_read_reg_244 <= (0=>pps, others=>'-');
                pps_read_reg_244_pp0_iter1_reg <= pps_read_reg_244;
                unixtime_V_read_reg_239 <= unixtime_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (us_tic_time_fu_162_p2 = ap_const_lv1_1))) then
                select_ln38_reg_269 <= select_ln38_fu_180_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (us_tic_time_fu_162_p2 = ap_const_lv1_1))) then
                us_clk_tics_V <= select_ln38_fu_180_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln214_fu_174_p2 <= std_logic_vector(unsigned(us_clk_tics_V) + unsigned(ap_const_lv20_1));
    add_ln23_fu_217_p2 <= std_logic_vector(unsigned(misaligncount) + unsigned(ap_const_lv16_1));
    add_ln700_fu_108_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_t_V) + unsigned(ap_const_lv9_1));
    and_ln22_1_fu_145_p2 <= (icmp_ln22_fu_133_p2 and icmp_ln22_1_fu_139_p2);
    and_ln22_fu_151_p2 <= (pps_rising_fu_124_p2 and and_ln22_1_fu_145_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_reg_90 <= "XXXXXXXXXXXXXXXXXXXX";
    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_t_V_assign_proc : process(hs_clk_tics_V, ap_enable_reg_pp0_iter18, ap_block_pp0_stage0, select_ln42_fu_194_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
            ap_sig_allocacmp_t_V <= select_ln42_fu_194_p3;
        else 
            ap_sig_allocacmp_t_V <= hs_clk_tics_V;
        end if; 
    end process;

    grp_fu_99_p1 <= ap_const_lv64_F4240(21 - 1 downto 0);
    icmp_ln22_1_fu_139_p2 <= "1" when (unsigned(us_clk_tics_V) > unsigned(ap_const_lv20_3E7)) else "0";
    icmp_ln22_fu_133_p2 <= "1" when (unsigned(us_clk_tics_V) < unsigned(ap_const_lv20_F3E59)) else "0";
    icmp_ln879_1_fu_168_p2 <= "1" when (us_clk_tics_V = ap_const_lv20_F4240) else "0";
    icmp_ln879_fu_157_p2 <= "1" when (add_ln700_reg_250 = ap_const_lv9_0) else "0";

    pps_misalign_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1))) then 
            pps_misalign_ap_vld <= ap_const_logic_1;
        else 
            pps_misalign_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    pps_rising_fu_124_p2 <= (xor_ln20_fu_118_p2 and pps_read_reg_244_pp0_iter17_reg);
    select_ln38_fu_180_p3 <= 
        ap_const_lv20_0 when (icmp_ln879_1_fu_168_p2(0) = '1') else 
        add_ln214_fu_174_p2;
    select_ln42_fu_194_p3 <= 
        ap_const_lv9_0 when (pps_rising_fu_124_p2(0) = '1') else 
        add_ln700_reg_250;
    time_V <= std_logic_vector(unsigned(mul_ln214_reg_274) + unsigned(zext_ln214_fu_229_p1));

    time_V_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1))) then 
            time_V_ap_vld <= ap_const_logic_1;
        else 
            time_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    us_tic_time_fu_162_p2 <= (pps_rising_fu_124_p2 or icmp_ln879_fu_157_p2);
    xor_ln20_fu_118_p2 <= (pps_last xor ap_const_lv1_1);
    zext_ln214_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter20_empty_reg_90),64));
end behav;
