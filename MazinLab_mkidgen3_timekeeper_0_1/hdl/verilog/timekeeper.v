// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="timekeeper,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.085000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=393,HLS_SYN_LUT=534,HLS_VERSION=2019_2_1}" *)

module timekeeper (
        ap_clk,
        ap_rst_n,
        pps,
        time_V,
        time_V_ap_vld,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        ctrl_clk,
        ap_rst_n_ctrl_clk
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   pps;
output  [63:0] time_V;
output   time_V_ap_vld;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   ctrl_clk;
input   ap_rst_n_ctrl_clk;

reg[63:0] time_V;
reg time_V_ap_vld;

 reg    ap_rst_n_inv;
wire   [63:0] unixtime_V_i;
reg   [63:0] unixtime_V_o;
reg    unixtime_V_o_ap_vld;
reg   [29:0] counter_V;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg    ap_rst_n_ctrl_clk_inv;
reg   [29:0] t_V_1_reg_136;
reg   [29:0] t_V_1_reg_136_pp0_iter1_reg;
wire   [0:0] or_ln10_fu_84_p2;
reg   [0:0] or_ln10_reg_141;
reg   [0:0] or_ln10_reg_141_pp0_iter1_reg;
reg   [63:0] t_V_reg_145;
wire   [63:0] add_ln700_fu_108_p2;
reg   [63:0] add_ln700_reg_150;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
wire   [29:0] add_ln700_1_fu_90_p2;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] add_ln209_fu_123_p2;
wire   [63:0] r_V_fu_130_p2;
wire   [0:0] icmp_ln879_fu_78_p2;
wire   [0:0] or_ln10_fu_84_p1;
wire   [63:0] r_V_1_fu_115_p2;
wire   [63:0] zext_ln209_fu_120_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_100;

// power-on initialization
initial begin
#0 counter_V = 30'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

timekeeper_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
timekeeper_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ctrl_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .unixtime_V_o(unixtime_V_o),
    .unixtime_V_o_ap_vld(unixtime_V_o_ap_vld),
    .unixtime_V_i(unixtime_V_i),
    .clk(ap_clk),
    .rst(ap_rst_n_ctrl_clk_inv)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_100)) begin
        if ((or_ln10_fu_84_p2 == 1'd1)) begin
            counter_V <= 30'd0;
        end else if ((or_ln10_fu_84_p2 == 1'd0)) begin
            counter_V <= add_ln700_1_fu_90_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln10_reg_141 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln700_reg_150 <= add_ln700_fu_108_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln10_reg_141 <= or_ln10_fu_84_p2;
        or_ln10_reg_141_pp0_iter1_reg <= or_ln10_reg_141;
        t_V_1_reg_136 <= counter_V;
        t_V_1_reg_136_pp0_iter1_reg <= t_V_1_reg_136;
        t_V_reg_145 <= unixtime_V_i;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((or_ln10_reg_141_pp0_iter1_reg == 1'd1)) begin
            time_V = r_V_fu_130_p2;
        end else if ((or_ln10_reg_141_pp0_iter1_reg == 1'd0)) begin
            time_V = add_ln209_fu_123_p2;
        end else begin
            time_V = 'bx;
        end
    end else begin
        time_V = 'bx;
    end
end

always @ (*) begin
    if ((((or_ln10_reg_141_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((or_ln10_reg_141_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        time_V_ap_vld = 1'b1;
    end else begin
        time_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln10_reg_141 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        unixtime_V_o = add_ln700_fu_108_p2;
    end else begin
        unixtime_V_o = unixtime_V_i;
    end
end

always @ (*) begin
    if (((or_ln10_reg_141 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unixtime_V_o_ap_vld = 1'b1;
    end else begin
        unixtime_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln209_fu_123_p2 = (r_V_1_fu_115_p2 + zext_ln209_fu_120_p1);

assign add_ln700_1_fu_90_p2 = (30'd1 + counter_V);

assign add_ln700_fu_108_p2 = (64'd1 + unixtime_V_i);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_100 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_ctrl_clk_inv = ~ap_rst_n_ctrl_clk;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln879_fu_78_p2 = ((counter_V == 30'd512000000) ? 1'b1 : 1'b0);

assign or_ln10_fu_84_p1 = pps;

assign or_ln10_fu_84_p2 = (or_ln10_fu_84_p1 | icmp_ln879_fu_78_p2);

assign r_V_1_fu_115_p2 = t_V_reg_145 << 64'd20;

assign r_V_fu_130_p2 = add_ln700_reg_150 << 64'd20;

assign zext_ln209_fu_120_p1 = t_V_1_reg_136_pp0_iter1_reg;

endmodule //timekeeper
